{"componentChunkName":"component---node-modules-gatsby-theme-blog-core-src-templates-post-query-js","path":"/command-line-cheat-sheet/","result":{"data":{"site":{"siteMetadata":{"title":"ozbe","social":[{"name":"twitter","url":"https://twitter.com/ozbe"},{"name":"github","url":"https://github.com/ozbe"},{"name":"linkedin","url":"https://www.linkedin.com/in/josh-aaseby"}]}},"blogPost":{"__typename":"MdxBlogPost","id":"0f066a65-d3c4-54ba-b87c-3a80ceb0366b","excerpt":"Everyday and obscure (yet helpful) commands and references I use when working in the command line. While I have some of these memorizedâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Command Line Cheat Sheet\",\n  \"date\": \"2021-01-09T00:00:00.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Everyday and obscure (yet helpful) commands and references I use when working in the command line. While I have some of these memorized, there are others I need reminding, and others I that have serious enough consequences I\\u2019d rather copy and paste (e.g. \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#delete-all-folders-except-name\"\n  }), \"Delete all folders, except [NAME]\"), \").\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"WARNING\"), \" I encourage you to research the utilties and arguments in a command before blindly executing them in a terminal.\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"NOTE\"), \" Commands tested in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"zsh 5.8 (x86_64-apple-darwin20.0)\"), \" on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"macOS 11.1 (20C69)\"))), mdx(\"h2\", {\n    \"id\": \"bash-prompt-symbols\"\n  }, \"Bash Prompt Symbols\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"~\"), \" Current working directory is the current user\\u2019s home directory.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"$\"), \" Current user is a standard user.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"#\"), \" Current user is the root user\")), mdx(\"p\", null, \"Source: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://phoenixnap.com/kb/change-bash-prompt-linux\"\n  }), \"How To Change or Customize Bash Prompt In Linux {25 Options}\")), mdx(\"h2\", {\n    \"id\": \"operators\"\n  }, \"Operators\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \">>\"), \" Append to file\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \">\"), \" output to something other than stdout (overwrite file)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"|\"), \" feed output into another process\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"||\"), \" OR operator\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"&&\"), \"  AND operator\")), mdx(\"h2\", {\n    \"id\": \"current-shell\"\n  }, \"Current shell\"), mdx(\"p\", null, \"Get a rough idea of what commands are available in \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"remote\"), \" shell instance.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"$ echo $0\\n\")), mdx(\"p\", null, \"Source: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://linuxhandbook.com/shell-using/\"\n  }), \"How to Find Which Shell You Are Using on Linux\")), mdx(\"h2\", {\n    \"id\": \"check-exit-code-from-previous-command\"\n  }, \"Check exit code from previous command\"), mdx(\"p\", null, \"Check if the process exited successfully without using something like logging.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ [SOME_COMMAND]\\n$ echo $?\\n\")), mdx(\"h2\", {\n    \"id\": \"folder-size\"\n  }, \"Folder Size\"), mdx(\"p\", null, \"Spot check the size of some output or see if the folder is a candidate for removal when cleaning up the file system.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"$ du -sh [NAME]\\n\")), mdx(\"h2\", {\n    \"id\": \"truncate-file\"\n  }, \"Truncate file\"), mdx(\"p\", null, \"Useful when debugging or want a clean slate.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \": > filename\\n\")), mdx(\"h2\", {\n    \"id\": \"pipe-multi-line-string-and-remove-all-whitespace\"\n  }, \"Pipe multi-line string (and remove all whitespace)\"), mdx(\"p\", null, \"Remove the whitespace from a multi-line string and pipe to a specific utility. I use this with the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/ozbe/readability-cli\"\n  }), \"Readability CLI\"), \" quite a bit.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ cat <<EOF | tr -d \\\"[:space:]\\\" | [UTILITY]\\n<!DOCTYPE html>\\n<html>\\n    <head>\\n        <title>Readability</title>\\n    </head>\\n    <body>\\n        Hello, world!\\n    </body>\\n</html>\\nEOF\\n\")), mdx(\"h2\", {\n    \"id\": \"move-files-including-dot-hidden-files\"\n  }, \"Move files, including dot (hidden) files\"), mdx(\"p\", null, \"Move \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"all\"), \" the files.\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Enable glob support\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"$ shopt -s dotglob\\n\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Move files\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"$ mv [SRC]/* [DESTINATION]/\\n\")), mdx(\"p\", null, \"Source: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://askubuntu.com/questions/259383/how-can-i-get-mv-or-the-wildcard-to-move-hidden-files\"\n  }), \"command line - How can I get mv (or the * wildcard) to move hidden files? - Ask Ubuntu\")), mdx(\"h2\", {\n    \"id\": \"delete-all-folders-except-name\"\n  }, \"Delete all folders, except \", \"[NAME]\"), mdx(\"p\", null, \"Clean up previous runs or logs except for the latest.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"find . ! -name '[NAME]' -type d -exec rm -rf {} +\\n\")), mdx(\"h2\", {\n    \"id\": \"make-directory-and-move-into-it\"\n  }, \"Make directory and move into it\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://en.wikipedia.org/wiki/Don%27t_repeat_yourself\"\n  }), \"Don\\u2019t repeat yourself\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ mkdir [DIRECTORY] && cd $_\\n\")), mdx(\"h2\", {\n    \"id\": \"make-intermediate-directories\"\n  }, \"Make intermediate directories\"), mdx(\"p\", null, \"Make a new directory and any missing parent directories.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ mkdir -p [DIRECTORY_WITH_SUBDIRECTORIES]\\n\")), mdx(\"h2\", {\n    \"id\": \"go-back-to-previous-directory\"\n  }, \"Go back to previous directory\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ cd -\\n\")), mdx(\"h2\", {\n    \"id\": \"file-stats\"\n  }, \"File Stats\"), mdx(\"p\", null, \"Get file stats, similar to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"File\"), \" > \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Get Info\"), \" in Finder.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ stat [FILE]\\n\")), mdx(\"h2\", {\n    \"id\": \"get-file-chmod-numerical-value-macos\"\n  }, \"Get file chmod numerical Value (macOS)\"), mdx(\"p\", null, \"Get the file chmod numerical value to compare to the value you\\u2019re told to set it to.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ stat -f \\u201C%OLp\\u201D [FILE]\\n\")), mdx(\"h2\", {\n    \"id\": \"list-all-processes\"\n  }, \"List all processes\"), mdx(\"p\", null, \"List all processes to see what\\u2019s running that shouldn\\u2019t be?\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ ps -A\\n\")), mdx(\"h2\", {\n    \"id\": \"track-process-by-port-and-kill-said-process\"\n  }, \"Track process by port and kill said process\"), mdx(\"p\", null, \"Port 8080 in use?! Find the process using the port and kill it.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"# get process id\\n$ sudo lsof -i :[PORT]\\n# kill process\\n$ kill -9 [PID]\\n\")), mdx(\"h2\", {\n    \"id\": \"follow-changes-in-a-file\"\n  }, \"Follow changes in a file\"), mdx(\"p\", null, \"Output new lines in a file to the terminal.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ tail -f [FILE]\\n\")), mdx(\"h2\", {\n    \"id\": \"copy-set-number-of-lines-from-the-end-of-one-file-to-another-file\"\n  }, \"Copy set number of lines from the end of one file to another file\"), mdx(\"p\", null, \"I only need a subset of the examples to run this test.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ tail -n [NUM_LINES] [SRC_FILE] > [DEST_FILE]\\n\")), mdx(\"h2\", {\n    \"id\": \"command-history-to-shell-script\"\n  }, \"Command history to shell script\"), mdx(\"p\", null, \"The most recent commands worked and it\\u2019d be nice to have them saved to be ran again.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ tail -n [NUM_LINES_PLUS_ONE] ~/.zsh_history | head -n [NUM_LINES] > [FILE].sh\\n\")), mdx(\"h2\", {\n    \"id\": \"recursive-grep\"\n  }, \"Recursive grep\"), mdx(\"p\", null, \"Search for text in directory and subdirectories.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ grep -R \\u2018[SEARCH_TEXT]\\u2019\\n\")), mdx(\"h2\", {\n    \"id\": \"list-files-to-check-with-symlink\"\n  }, \"List files to check with symlink\"), mdx(\"p\", null, \"List files and output information about symlinks. Useful when trying to find the location of a file.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ ls -al\\n\")), mdx(\"h2\", {\n    \"id\": \"output-all-file-names\"\n  }, \"Output all file names\"), mdx(\"p\", null, \"Output all file names (including those in subdirectories) and their relative path from the current working directory.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ find .\\n\")), mdx(\"h2\", {\n    \"id\": \"output-contents-of-file-to-clipboard-macos\"\n  }, \"Output contents of file to clipboard (macOS)\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ cat [FILE] | pbcopy\\n\")), mdx(\"h2\", {\n    \"id\": \"paste-to-file-macos\"\n  }, \"Paste to file (macOS)\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ pbpaste > [FILE]\\n\")), mdx(\"h2\", {\n    \"id\": \"extract-tgz-to-a-specific-folder\"\n  }, \"Extract tgz to a specific folder\"), mdx(\"p\", null, \"Extract tgz to a specific folder instead of the current working directory.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"tar zxvf [FILE].tgz -C [DESTINATION]\\n\")), mdx(\"h2\", {\n    \"id\": \"unzip-with-file-wildcard\"\n  }, \"Unzip with file wildcard\"), mdx(\"p\", null, \"Unzip a collection of zip files in a folder.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ unzip \\u2018[FILE_PREFIX]*.zip\\u2019\\n\")), mdx(\"h2\", {\n    \"id\": \"gunzip-all-files-in-a-directory\"\n  }, \"Gunzip all files in a directory\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ for file in *.gz; do gunzip $file; done\\n\")), mdx(\"h2\", {\n    \"id\": \"get-a-list-of-name-servers\"\n  }, \"Get a list of name servers\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ dig NS [domain]\\n\")), mdx(\"h2\", {\n    \"id\": \"test-name-server\"\n  }, \"Test name server\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ dig [domain] [@_NAME_SERVER]\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","slug":"/command-line-cheat-sheet/","title":"Command Line Cheat Sheet","tags":[],"date":"January 09, 2021","image":null,"imageAlt":null,"imageCaptionText":null,"imageCaptionLink":null,"socialImage":null},"previous":{"__typename":"MdxBlogPost","id":"fcd16732-c2d9-55c6-a3c7-dbec8aec7f4d","excerpt":"How I manage my notifications at work to minimize context switching, remove redundancy, and reduce noise, so I can focus on more impactfulâ€¦","slug":"/wrangle-work-notifications/","title":"Wrangle Work Notifications","date":"January 04, 2021"},"next":{"__typename":"MdxBlogPost","id":"51c93033-b748-5b54-9094-f72f892591c2","excerpt":"Steps to run a Unity Android Build (APK) on Android (Anbox) in Docker ( AinD ) on a Mac. Running Android builds in Docker can be tool forâ€¦","slug":"/run-unity-android-build-on-android-in-docker/","title":"Run Unity Android Build on Android in Docker","date":"January 15, 2021"}},"pageContext":{"id":"0f066a65-d3c4-54ba-b87c-3a80ceb0366b","previousId":"fcd16732-c2d9-55c6-a3c7-dbec8aec7f4d","nextId":"51c93033-b748-5b54-9094-f72f892591c2","maxWidth":1380}},"staticQueryHashes":["2744905544","3090755652","386998304","764694655"]}